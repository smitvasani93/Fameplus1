@model  Transactiondetails.ViewModels.JobReciptVM
@using Newtonsoft.Json;

@{
    var jsonMode = JsonConvert.SerializeObject(Model.Mode);
    var jsonProcessList = JsonConvert.SerializeObject(Model.Processes);
    var htmlAttributes = new Dictionary<string, object>();
    htmlAttributes.Add("class", "form-control");
    htmlAttributes.Add("readonly", true);
    //if (Model.Mode == Transactiondetails.ViewModels.Mode.Update)
    //{
    //    htmlAttributes.Add("readonly", true);
    //}
}

@using (Ajax.BeginForm("SaveJobworkReceipt", "JobWorkReceipts", new AjaxOptions { HttpMethod = "Post", UpdateTargetId = "result", OnSuccess = "AjaxFormSuccess" }, new { id = "JobworkReceiptPop" }))
{
    @Html.HiddenFor(model => model.Mode)
    <div class="row g-3">
        <div class="col-lg-12">
            <div class="row">
                <div class="col-sm-2">
                    <label for="inputEmail3" class="col-form-label">Receipt Date</label>
                </div>
                <div class="col-sm-5">
                    @Html.TextBoxFor(x => x.ReferenceDate, "{0:dd/MM/yyyy}", new { @id = "ReferenceDate1", @class = "form-control" })
                </div>
                <div class="col-sm-2 mr-minus">
                    <label for="inputEmail3" class="col-form-label">Receipt No</label>
                </div>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.SerialNumber, htmlAttributes)
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="row">
                <label for="inputEmail3" class="col-sm-2 col-form-label">Customer Name</label>
                <div class="col-sm-5">
                    @Html.DropDownList("AccountCode", new SelectList(Model.Accounts, "AccountCode", "AccountName", Model.AccountCode), "Please select", new { @id = "ddlCustomer", @class = "form-select" })
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div id="newone" class="row pt-1" style="overflow-x:auto;">
                <table id="receipt" class="table table-bordered">
                    <thead>
                        <tr>
                            <th style="width:400px;">Process</th>
                            <th>Packet No</th>
                            <th>Pieces</th>
                            <th>Carats</th>
                            <th>Lines</th>
                            <th>Remarks</th>
                            <th></th>
                        </tr>
                    </thead>
                    @for (var i = 0; i < Model.JobReceiptDetails.Count(); i++)
                    {
                        <tr>
                            <td>
                                @Html.DropDownListFor(model => Model.JobReceiptDetails[i].ProcessCode, new SelectList(Model.Processes, "ProcessCode", "ProcessName", Model.JobReceiptDetails[i].ProcessCode), "Please select", new { @class = "form-select", @required = true })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobReceiptDetails[i].PacketNumber, new { @required = true, @class = "form-control numberonly" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobReceiptDetails[i].ItemPieces, new { @required = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobReceiptDetails[i].ItemCarats, new { @required = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobReceiptDetails[i].ItemLines, new { @required = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobReceiptDetails[i].Remarks, new { @class = "form-control" })
                            </td>
                            <td class="plsRow">
                                @if (Model.JobReceiptDetails.Count() - 1 == i)
                                {
                                    <div class="container">
                                        <div>
                                            <a class="addRow" href="javascript:void(0);">
                                                <i class="fa fa-plus"></i>
                                            </a>
                                        </div>
                                        @if (Model.JobReceiptDetails.Count() == 1)
                                        {
                                            <div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div>
                                                <a class="deleteRow" href="javascript:void(0);">
                                                    <i class="fa fa-trash"></i>
                                                </a>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="container">
                                        <div>
                                        </div>
                                        <div>
                                            <a class="deleteRow" href="javascript:void(0);">
                                                <i class="fa fa-trash"></i>
                                            </a>
                                        </div>
                                    </div>
                                }
                            </td>
                            <td style="display:none">
                                @Html.HiddenFor(model => Model.JobReceiptDetails[i].ItemSerialNumber)
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
        <div class="col-lg-12 ui-dialog-buttonpane ui-helper-clearfix">
            <div class="ui-dialog-buttonset ps-sm-5">
                <button type="submit" class="btn btn-secondary">Submit</button>
                @if (Model.Mode == Transactiondetails.ViewModels.Mode.Update)
                {
                    <button type="button" id="btnDelete" class="btn btn-danger" data-serial-no="@Model.SerialNumber">Delete</button>
                }
                <button type="button" class="btn btn-default btn-close-dialog">Close</button>
            </div>
        </div>
    </div>
    <div id="result">

    </div>
}

<script type="text/javascript">

    var mode =@(Html.Raw(jsonMode));
    var processlist=@(Html.Raw(jsonProcessList));

    $(function () {

        $("#ReferenceDate1").on("focusin", function (e) {
            return false; // or e.stopPropagation();
        }).datepicker({
            /*showOn: "button",*/
            autoOpen:false,
            showButtonPanel: false,
            dateFormat: 'dd-mm-yy',
            onSelect: function () {

            }
        });
    });

    $(function () {

        $("#receipt").on('click', '.addRow', function (evt) {
            evt.stopPropagation();
            let noclone = false;

            $("#receipt tbody tr").each(function (i, row) {
                let $actualrow = $(row);
                $actualrow.find("td").each(function (column, td) {

                    let select = $(td).find("select");
                    let text = $(td).find("input[type=text]").not('[name*=Remark]');

                    if (select.length != 0) {

                        $(select).rules("add", { required: true, messages: { required: "" } });

                        if ($(select).val() == 0 || $(select).val() == "") {
                            $(select).addClass("error");
                            noclone = true;
                        } else {
                            $(select).removeClass("error");
                        }
                    }
                    if (text.length != 0) {

                        $(text).rules("add", { required: true, messages: { required: "" } });

                        if ($(text).val() == "") {
                            $(text).addClass("error");
                            noclone = true;
                        } else {
                            $(text).removeClass("error");
                        }
                    }
                });
            });

            if (!noclone) {

                let rowCount = $("#receipt > tbody >tr").length
                let tr = $("#newone").find("table").find("tr:last").clone();

                $("#receipt tbody tr").each(function (i, row) {
                    let $actualrow = $(row);

                    $actualrow.find("td.plsRow").each(function (column, td) {

                        if ($(td).find("div.container").length !== 0) {
                            $(td).find("div.container").remove();
                            let $adddelete = $("<div class=\"container\"><div></div><div><a class=\"deleteRow\" href=\"javascript:void(0);\"><i class=\"fa fa-trash\" ></i></a></div></div>");
                            $(td).append($adddelete);
                        }
                    });
                });

                tr.find("input[name*='PacketNumber']").val("1");
                tr.find("input[name*='ItemPieces']").val("1");
                tr.find("input[name*='ItemLines']").val("0");
                tr.find("input[name*='ItemCarats']").val("0");
                tr.find("select[name*='ProcessCode']").val("");
                tr.find("td.plsRow").each(function (column, td) {

                    if ($(td).find("div.container").length !== 0) {
                        $(td).find("div.container").remove();
                        let $adddelete = $("<div class=\"container\"><div><a class=\"addRow\" href=\"javascript: void (0);\"><i class=\"fa fa-plus\" ></i></a></div><div><a class=\"deleteRow\" href=\"javascript:void(0);\"><i class=\"fa fa-trash\" ></i></a></div></div>");
                        $(td).append($adddelete);
                    }
                });

                $("#receipt").append(tr);
                resetElementIndex();
            }
        });

        $("#receipt").on('click', '.deleteRow', function () {
            if (1 != $('#receipt >tbody >tr').length) {

                $(this).closest("tr").remove();

                let rowCount = $("#receipt > tbody >tr").length;
                let tr = $("#newone").find("table").find("tr:last")
                tr.find("td.plsRow").each(function (column, td) {

                    if ($(td).find("div.container").length !== 0) {
                        $(td).find("div.container").remove();

                        let $adddelete = $("<div class=\"container\"><div><a class=\"addRow\" href=\"javascript: void (0);\"><i class=\"fa fa-plus\" ></i></a></div><div><a class=\"deleteRow\" href=\"javascript:void(0);\"><i class=\"fa fa-trash\" ></i></a></div></div>");
                        if (rowCount === 1) {
                            $adddelete = $("<div class=\"container\"><div><a class=\"addRow\" href=\"javascript: void (0);\"><i class=\"fa fa-plus\" ></i></a></div><div></div></div>");
                        }
                        $(td).append($adddelete);
                    }
                });
            }

            resetElementIndex();
        });
    });

    function resetElementIndex() {
        let index = 0;

        $("#receipt tbody tr").each(function (i, row) {
            let $actualrow = $(row);
            $actualrow.find("td").each(function (column, td) {

                let $selectName = $(this).find("input,select").attr("name");
                let $name = $(this).find("input,text").attr("name");
                let $hidenname = $(this).find("input,hidden").attr("name");
                let $ctrl = undefined;

                if ($hidenname !== undefined && $hidenname.indexOf(".ItemSerialNumber") != -1) {
                    $(this).find("input,hidden").attr("id", "JobReceiptDetails_" + index + "__ItemSerialNumber");
                    $(this).find("input,hidden").attr("name", "JobReceiptDetails[" + index + "].ItemSerialNumber");
                    $ctrl = $(this).find("input,hidden").attr("name","JobReceiptDetails[" + index + "].ItemSerialNumber");
                    $($ctrl).val(index+1);
                }

                if ($selectName !== undefined && $selectName.indexOf(".ProcessCode") != -1) {
                    $(this).find("input,select").attr("id", "JobReceiptDetails_" + index + "__ProcessCode");
                    $(this).find("input,select").attr("name", "JobReceiptDetails[" + index + "].ProcessCode");
                    $ctrl = $(this).find("input,select").attr("name", "JobReceiptDetails[" + index + "].ProcessCode");
                }

                if ($name !== undefined && $name.indexOf(".PacketNumber") != -1) {
                    $(this).find("input,text").attr("id", "JobReceiptDetails_" + index + "__PacketNumber");
                    $(this).find("input,text").attr("name", "JobReceiptDetails[" + index + "].PacketNumber");
                    $ctrl = $(this).find("input,text").attr("name","JobReceiptDetails[" + index + "].PacketNumber");
                }

                if ($name !== undefined && $name.indexOf(".ItemPieces") != -1) {
                    $(this).find("input,text").attr("id", "JobReceiptDetails_" + index + "__ItemPieces");
                    $(this).find("input,text").attr("name", "JobReceiptDetails[" + index + "].ItemPieces");
                    $ctrl = $(this).find("input,text").attr("name","JobReceiptDetails[" + index + "].ItemPieces");
                }

                if ($name !== undefined && $name.indexOf(".ItemCarats") != -1) {
                    $(this).find("input,text").attr("id", "JobReceiptDetails_" + index + "__ItemCarats");
                    $(this).find("input,text").attr("name", "JobReceiptDetails[" + index + "].ItemCarats");
                    $ctrl = $(this).find("input,text").attr("name","JobReceiptDetails[" + index + "].ItemCarats");
                }

                if ($name !== undefined && $name.indexOf(".ItemLines") != -1) {
                    $(this).find("input,text").attr("id", "JobReceiptDetails_" + index + "__ItemLines");
                    $(this).find("input,text").attr("name", "JobReceiptDetails[" + index + "].ItemLines");
                    $ctrl = $(this).find("input,text").attr("name","JobReceiptDetails[" + index + "].ItemLines");
                }

                if ($name !== undefined && $name.indexOf(".Remark") != -1) {
                    $(this).find("input,text").attr("id", "JobReceiptDetails_" + index + "__Remark");
                    $(this).find("input,text").attr("name", "JobReceiptDetails[" + index + "].Remark");
                    $ctrl = $(this).find("input,text").attr("name", "JobReceiptDetails[" + index + "].Remark");
                }

                if ($ctrl !== undefined &&
                    !$($ctrl).is(":hidden") &&
                    !$($ctrl).is("[name*=Remark]")) {
                    $($ctrl).rules("add", { required: true, messages: { required: "" } });
                }
            });
            index++;
        });
    }

    function AjaxFormSuccess(e) {

        if (e.error === 'false') {
            $('#dialog').dialog('close');
            $("div[role='alert']").removeClass("hide-element");
            $("div[role='alert']").contents().filter(function () {
                return this.nodeType === 3;
            }).remove();
            let msg = "Saved successfully";
            if (mode !== 1) {
                msg = "Updated successfully";
            }
            $("div[role=\"alert\"]").append(msg);
            $("#jqgridtbl").trigger("reloadGrid");
        } else {

        }
    }

    $("#receipt").on("change", "tr select[name*=\"ProcessCode\"]", function (e) {
        debugger;
        if ($(this).val() === "") {
            return;
        }
        let processCode = parseInt($(this).val());

        var list = processlist.filter(fl => fl.ProcessCode === processCode);

        if (list[0].BillingType === "C") {
            $(this).closest("tr").find("input[name*=\"ItemCarats\"]").rules("add", { min: 1, messages: { min: "" } });
        }
        if (list[0].BillingType === "P") {
            
            $(this).closest("tr").find("input[name*=\"ItemLines\"]").rules("add", { min: 1, messages: { min: "" } });
        }

    });

    $(document).ready(function () {
        $(".addRow").keydown(function (event) {
            if (event.which == 13) {
                event.preventDefault();
                $('.addRow').click();
            }
        });
        $(".deleteRow").keydown(function (event) {
            if (event.which == 13) {
                event.preventDefault();
                $('.deleteRow').click();
            }
        });
    });

    jQuery(document).ready(function () {

        jQuery("#JobworkReceiptPop").validate({
           rules: {
                ReferenceDate: 'required',
                AccountCode: 'required',
                SerialNumber: 'required',
            }, messages: {
                ReferenceDate: 'Select Reference Date',
                AccountCode: 'Select Customer',
                SerialNumber: 'Select Serial Number',
            },
            errorPlacement: function (error, element) {

                let name = element.attr("name");
                if (name === "ReferenceDate" || name === "AccountCode" || name === "SerialNumber") {
                    error.insertAfter(element);
                }
                return;
            }
            /*errorPlacement: $.noop*/
        });

        if (mode === 2) {
            $("#SerialNumber").rules("remove", "required");
        }

        $("#receipt tbody tr").each(function (i, row) {

            let $actualrow = $(row);
            $actualrow.find("td").each(function (column, td) {

                let select = $(td).find("select");
                let text = $(td).find("input[type=text]").not('[name*=Remark]');

                if (select.length != 0) {
                    $(select).rules("add", { required: true, messages: { required: "" } });
                }
                if (text.length != 0) {
                    $(text).rules("add", { required: true, messages: { required: "" } });
                }
            });
        });
    });

    $(document).on("click", ".btn-close-dialog", function (e) {
        $('#dialog').dialog('close');
    })

    $("#btnDelete").click(function (e) {

        let serialNo = $(this).data("serial-no");
        if (confirm("Are you sure you want to delete Recipet No:" + serialNo + " ?") == false) {
            return false;
        }

          $.ajax({
            url: "@Url.Action("deleteReceipt", "jobworkreceipts")",
            type: "POST",
              data: { serialno: serialNo },
            dataType: 'json',
              success: function (data) {
                  if (data.message ==="Success") {
                      $('#dialog').dialog('close');
                      $('#jqgridtbl').trigger('reloadGrid');
                  }
            }
        });

    });

</script>
<style>

    #JobworkReceiptPop .ui-dialog .ui-dialog-buttonpane {
        margin-top: -5px !important;
        padding-top: 1px !important;
    }

    #receipt .container {
        display: flex;
        align-items: center;
        padding: 0;
        justify-content: center;
    }

        #receipt .container a {
            margin-left: .2em;
            margin-right: .2em;
        }
</style>