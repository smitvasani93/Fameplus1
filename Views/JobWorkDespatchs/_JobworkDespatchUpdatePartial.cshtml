@model  Transactiondetails.ViewModels.JobDespatchViewModel
@using Newtonsoft.Json;

@{
    var jsonMode = JsonConvert.SerializeObject(Model.Mode);
    var jsonModel = JsonConvert.SerializeObject(Model);
    var htmlAttributes = new Dictionary<string, object>();
    htmlAttributes.Add("class", "form-control");
    htmlAttributes.Add("readonly", true);
    //if (Model.Mode == Transactiondetails.ViewModels.Mode.Update)
    //{
    //    htmlAttributes.Add("readonly", true);
    //}
}

@using (Ajax.BeginForm("SaveJobworkDespatch", "JobWorkDespatchs", new AjaxOptions { HttpMethod = "Post", UpdateTargetId = "result", OnSuccess = "AjaxFormSuccess" }, new { id = "JobworkReceiptPop" }))
{
    @Html.HiddenFor(model => model.Mode)
    <div class="row g-3">
        <div class="col-lg-12">
            <div class="row">
                <div class="col-sm-2">
                    <label for="inputEmail3" class="col-form-label">Despatch Date</label>
                </div>
                <div class="col-sm-5">
                    @Html.TextBoxFor(x => x.ReferenceDate, "{0:dd/MM/yyyy}", new { @id = "ReferenceDate11", @class = "form-control", @readonly = true })
                </div>
                <div class="col-sm-2 mr-minus">
                    <label for="inputEmail3" class="col-form-label">Despatch No</label>
                </div>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.SerialNumber, htmlAttributes)
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="row">
                <label for="inputEmail3" class="col-sm-2 col-form-label">Customer Name</label>
                <div class="col-sm-5">
                    @Html.DropDownList("AccountCode", new SelectList(Model.Accounts, "AccountCode", "AccountName", Model.AccountCode), "Please select", new { @id = "ddlCustomer", @class = "form-select", @disabled = true })
                    @Html.HiddenFor(model => model.AccountCode, new { @id = "AccountCodedummy" })
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div id="newone" class="row pt-1" style="overflow-x: auto; white-space: nowrap;">
                <table id="despatch" class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Ref. Date</th>
                            <th>Process</th>
                            <th>Packet No</th>
                            <th>Pieces</th>
                            <th>Carats</th>
                            <th>Lines</th>
                            <th>Pieces Despatch</th>
                            <th>Carats Despatch</th>
                            <th>Lines Despatch</th>
                            <th>Weight Loss</th>
                            <th>Status</th>
                            <th>Billing Unit</th>
                            <th>Billing Qty</th>
                            <th>No Charge Qty</th>
                            <th>Rate</th>
                            <th>Remarks</th>
                        </tr>
                    </thead>
                    @for (var i = 0; i < Model.JobDespatchDetails.Count(); i++)
                    {

                        <tr class="receipt-@Model.JobDespatchDetails[i].ProcessCode">
                            <td>
                                @Model.JobDespatchDetails[i].ReferenceDate.ToString("d/M/yyyy")
                            </td>
                            <td>
                                @Model.JobDespatchDetails[i].ProcessName
                                @Html.HiddenFor(model => Model.JobDespatchDetails[i].ProcessCode)
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].PacketNumber, new { @required = true, @readonly = true, @class = "form-control numberonly" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].ItemPieces, new { @required = true, @readonly = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].ItemCarats, new { @required = true, @readonly = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].ItemLines, new { @required = true, @readonly = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].BalItemPieces, new { @required = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].BalItemCarats, new { @required = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].BalItemLines, new { @required = true, @class = "form-control allow_decimal" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].WeightLoss, new { @class = "form-control" })
                            </td>
                            <td>
                                @Html.DropDownListFor(model => Model.JobDespatchDetails[i].Status, (new[] { new SelectListItem { Text = "Yes", Value = "yes" }, new SelectListItem { Text = "No", Value = "no" } }), new { @class = "form-select" })

                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].BillingUnit, new { @class = "form-control" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].BillingQuantity, new { @class = "form-control" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].NoChargeQuantity, new { @class = "form-control" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].Rate, new { @class = "form-control" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => Model.JobDespatchDetails[i].Remarks, new { @class = "form-control" })
                                @Html.HiddenFor(model => Model.JobDespatchDetails[i].ItemSerialNumber)
                                @Html.HiddenFor(model => Model.JobDespatchDetails[i].SerialNumber)
                                @Html.HiddenFor(model => Model.JobDespatchDetails[i].JRSerialNumber)
                                @Html.HiddenFor(model => Model.JobDespatchDetails[i].JRItemSerialNumber)
                            </td>
                        </tr>
                    }
                </table>

            </div>
        </div>
        <div class="col-lg-12 button-container">
            <div class="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix">
                <div class="ui-dialog-buttonset ps-sm-5">
                    <button type="submit" class="btn btn-secondary">Submit</button>
                    <button type="button" class="btn btn-default btn-close-dialog ">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div id="result">

    </div>
}

<script type="text/javascript">

    var mode =@(Html.Raw(jsonMode));

    function AjaxFormSuccess(e) {

        $('#dialog').dialog('close');
    }

    jQuery(document).ready(function () {

        jQuery("#JobworkReceiptPop").validate({
           rules: {
                ReferenceDate: 'required',
                AccountCode: 'required',
                SerialNumber: 'required',
            },
            messages: {
                ReferenceDate: 'Select Reference Date',
                AccountCode: 'Select Customer',
                SerialNumber: 'Select Serial Number',
            },
            errorPlacement: $.noop
        });

        $("#despatch tbody tr").each(function (i, row) {

            let $actualrow = $(row);
            $actualrow.find("td").each(function (column, td) {

                let select = $(td).find("select");
                let text = $(td).find("input[type=text]").not('[name*=Remark]');

                if (select.length != 0) {
                    $(select).rules("add", { required: true, messages: { required: "" } });
                }
                if (text.length != 0) {
                    $(text).rules("add", { required: true, messages: { required: "" } });
                }
            });
        });
    });

    $(document).on("click", ".btn-close-dialog", function (e) {
        $('#dialog').dialog('close');
    });

    $("#despatch").on("input", "tr input[name*='BalItemPieces']", function (e) {

        if ($(this).val() === "") {
            return;
        }
        let despatchPieces = parseInt($(this).val());
        let Pieces = parseInt($(this).closest("tr").find("input[name*='Pieces']").val());

        if (despatchPieces > Pieces) {
            $(this).val(Pieces);
        }
    });

     $("#despatch").on("input", "tr input[name*='BalItemCarats']", function (e) {

        if ($(this).val() === "") {
            return;
        }
        let despatchCarats = parseInt($(this).val());
        let Carats = parseInt($(this).closest("tr").find("input[name*='ItemCarats']").val());

        if (despatchCarats > Carats) {
            $(this).val(Carats);
        }
    });

    $("#despatch").on("input", "tr input[name*='BalItemLines']", function (e) {

        if ($(this).val() === "") {
            return;
        }
        let despatchLine = parseInt($(this).val());
        let line = parseInt($(this).closest("tr").find("input[name*='ItemLines']").val());

        if (despatchLine > line) {
            $(this).val(line);
        }
    });

    $("#despatch").on("input", "tr input[name*='BillingQuantity']", function (e) {

        if ($(this).val() === "") {
            return;
        }
        debugger;
        let bQty = parseInt($(this).val());
        let processcode = $(this).closest("tr").find("input[name*='ProcessCode']").val();
        let $rate = $(this).closest("tr").find("input[name*='Rate']");
         $.ajax({
            url: "@Url.Action("GetRateByBillingQty", "JobWorkDespatchs")",
            type: "GET",
            data: { billingQty: bQty, ProcessCode: processcode },
            dataType: 'json',
            success: function (result) {

                if (result.message === "Success") {
                    $rate.val(result.Rate)
                }
            }
        });

    });


    Array.prototype.removeByValue = function (val) {
        for (var i = 0; i < this.length; i++) {
            if (this[i] === val) {
                this.splice(i, 1);
                i--;
            }
        }
        return this;
    }

</script>
<style>
     #JobworkReceiptPop .form-control:read-only {
         background-color: #e9ecef !important;
     }

     #JobworkReceiptPop .ui-jqgrid .ui-jqgrid-htable th {
         height: 40px !important;
         /* padding: 0 2px 0 2px; */
     }

     #JobworkReceiptPop .ui-jqgrid tr.jqgrow td {
         padding: 4px !important;
     }

     #JobworkReceiptPop .ui-jqgrid .ui-jqgrid-view {
         font-size: 13px !important;
     }

     #JobworkReceiptPop .ui-widget input {
         margin-top: 5px !important;
     }

     #JobworkReceiptPop .ui-widget-content {
         border: 1px solid #efefef !important;
     }

     .newone-css {
         display: none;
     }

     #despatch th {
         font-size: 13px;
     }

     #despatch tr {
         font-size: 12px;
     }

         #despatch tr td:not(:first-child):not(:nth-child(2)) {
             /*padding-left:10px !important;
    padding-right:10px !important;*/
         }

         #despatch tr td:nth-child(3n) {
             padding-left: 10px !important;
             padding-right: 10px !important;
         }

    .wrap {
        width: 100%;
        overflow-x: scroll;
    }

    table {
        min-width: 100%;
        width: auto;
    }

    td {
        /*border: 1px solid #000;*/
        padding: 10px;
        white-space: nowrap;
    }
   
</style>